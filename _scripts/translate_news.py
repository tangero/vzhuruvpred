#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import json
import urllib.request
import os
import time
import random
from urllib.error import HTTPError

def clean_title(text):
    """Vyƒçist√≠ nadpis od uvozovek a zdroj≈Ø"""
    if not text:
        return text
    
    # Odstranit uvozovky z zaƒç√°tku a konce
    text = text.strip('"').strip("'")
    
    # Odstranit zdroj za pomlƒçkou na konci (nap≈ô. "- CNN", "- BBC News")
    # Hled√°me pomlƒçku n√°sledovanou 1-3 slovy na konci
    import re
    text = re.sub(r'\s*[-‚Äì‚Äî]\s*[A-Z][A-Za-z\s&\.]{1,25}$', '', text)
    
    return text.strip()

def is_sports_news(title, description):
    """Zkontroluje, jestli je zpr√°va sportovn√≠ a net√Ωk√° se ƒçesk√Ωch t√Ωm≈Ø/hr√°ƒç≈Ø"""
    # Kl√≠ƒçov√° slova pro sport
    sports_keywords = [
        'NFL', 'NBA', 'MLB', 'NHL', 'Premier League', 'Champions League',
        'Super Bowl', 'touchdown', 'quarterback', 'basketball', 'baseball',
        'hockey', 'tennis', 'golf', 'soccer', 'football', 'match', 'game',
        'victory', 'defeat', 'score', 'championship', 'tournament',
        'US Open', 'Grand Prix', 'Formula', 'ATP', 'WTA', 'FIFA',
        'playoff', 'finals', 'medal', 'Olympics', 'World Cup',
        'pitcher', 'striker', 'goalkeeper', 'coach', 'manager',
        'transfer', 'signing', 'injury', 'suspension'
    ]
    
    # ƒåesk√° kl√≠ƒçov√° slova (tyto zpr√°vy CHCEME zachovat)
    czech_keywords = [
        'Czech', 'ƒåesk', 'Praha', 'Prague', 'Plze≈à', 'Slavia', 'Sparta',
        'Liberec', 'Ostrava', 'Brno', 'Olomouc', 'Pardubice',
        'Leheƒçka', 'Kvitov√°', 'Pl√≠≈°kov√°', 'Mach√°ƒç', 'Siniakov√°',
        'Vesel√Ω', 'Berdych', '≈†af√°≈ôov√°', 'Str√Ωcov√°', 'Krejƒç√≠kov√°',
        'Vondrou≈°ov√°', 'Muchov√°', 'Noskov√°', 'Men≈°√≠k'
    ]
    
    text_to_check = (title + ' ' + (description or '')).lower()
    
    # Pokud obsahuje ƒçesk√© reference, ponechat
    for keyword in czech_keywords:
        if keyword.lower() in text_to_check:
            return False
    
    # Jinak zkontrolovat, jestli je to sport
    for keyword in sports_keywords:
        if keyword.lower() in text_to_check:
            return True
    
    return False

def translate_text_with_openrouter(text, max_retries=3):
    """P≈ôelo≈æ√≠ text pomoc√≠ OpenRouter.ai s rate limiting"""
    if not text or len(text.strip()) == 0:
        return text
    
    # Rate limiting - ƒçekat mezi po≈æadavky
    time.sleep(random.uniform(1.0, 2.0))
    
    api_key = os.environ.get('OPENROUTER_API_KEY')
    if not api_key:
        print(f"    ‚ö†Ô∏è  OPENROUTER_API_KEY nenalezen, ponech√°v√°m: {text[:50]}...")
        return text
    
    for attempt in range(max_retries):
        try:
            print(f"  ü§ñ P≈ôekl√°d√°m: {text[:50]}...")
            
            prompt = f"""P≈ôelo≈æ tento anglick√Ω nadpis zpr√°vy do ƒçe≈°tiny. Odpovƒõz pouze p≈ôelo≈æen√Ωm nadpisem, nic jin√©ho. Bez koment√°≈ô≈Ø, bez variant, bez vysvƒõtlen√≠.

"{text}"

P≈ôeklad:"""
            
            # OpenRouter.ai API vol√°n√≠
            data = {
                "model": "deepseek/deepseek-chat-v3.1:free",
                "messages": [
                    {"role": "user", "content": prompt}
                ],
                "max_tokens": 100,
                "temperature": 0.2
            }
            
            headers = {
                "Authorization": f"Bearer {api_key}",
                "Content-Type": "application/json",
                "HTTP-Referer": "https://github.com/tangero/vzhuruvpred",
                "X-Title": "VzhuruVpred News Translation"
            }
            
            req = urllib.request.Request(
                "https://openrouter.ai/api/v1/chat/completions",
                data=json.dumps(data).encode('utf-8'),
                headers=headers
            )
            
            with urllib.request.urlopen(req, timeout=30) as response:
                result = json.loads(response.read().decode('utf-8'))
                
            translated_title = result['choices'][0]['message']['content'].strip()
            
            # Oƒçist√≠me odpovƒõƒè od p≈ô√≠padn√Ωch koment√°≈ô≈Ø
            # Pokud obsahuje ƒç√≠slovan√© seznam nebo "Nejv√Ωsti≈ænƒõj≈°√≠", vezmeme jen prvn√≠ ≈ô√°dek
            lines = translated_title.split('\n')
            if len(lines) > 1:
                # Najdeme prvn√≠ ≈ô√°dek, kter√Ω obsahuje skuteƒçn√Ω p≈ôeklad
                for line in lines:
                    line = line.strip()
                    if line and not line.startswith('**') and not line.startswith('1.') and not line.startswith('2.') and not 'Nejv√Ωsti≈ænƒõj≈°√≠' in line and not 'variant' in line.lower():
                        translated_title = line
                        break
                else:
                    translated_title = lines[0].strip()
            
            # Odstran√≠me p≈ô√≠padn√© uvozovky a jin√© form√°tov√°n√≠
            translated_title = translated_title.strip('"\'*:')
            
            # Zajist√≠me rozumnou d√©lku
            if len(translated_title) > 200:
                translated_title = translated_title[:197] + '...'
                
            print(f"    ‚úÖ V√Ωsledek: {translated_title}")
            return translated_title
            
        except HTTPError as e:
            if e.code == 429:  # Too Many Requests
                wait_time = (2 ** attempt) + random.uniform(1, 3)  # Exponential backoff
                print(f"    ‚è≥ Rate limit dosa≈æen, ƒçek√°m {wait_time:.1f}s... (pokus {attempt + 1}/{max_retries})")
                time.sleep(wait_time)
                continue
            else:
                print(f"    ‚ùå HTTP chyba {e.code}: {e}")
                return text
        except Exception as e:
            print(f"    ‚ùå Chyba p≈ôi p≈ôekladu: {e}")
            if attempt < max_retries - 1:
                wait_time = random.uniform(2, 4)
                print(f"    ‚è≥ ƒåek√°m {wait_time:.1f}s p≈ôed dal≈°√≠m pokusem...")
                time.sleep(wait_time)
                continue
            else:
                # Posledn√≠ pokus selhal, vr√°t√≠me p≈Øvodn√≠ text
                break
    
    # Pokud v≈°echny pokusy selhaly
    print(f"    ‚ùå OpenRouter API selhalo po {max_retries} pokusech: {text[:50]}...")
    return text

def main():
    # Naƒç√≠st zpr√°vy
    with open('_data/world_news.json', 'r', encoding='utf-8') as f:
        data = json.load(f)
    
    print(f"Naƒçteno {len(data['articles'])} zpr√°v...")
    
    # Filtrovat sportovn√≠ zpr√°vy (kromƒõ ƒçesk√Ωch)
    filtered_articles = []
    for article in data['articles']:
        title = clean_title(article.get('title', ''))
        article['title'] = title  # Ulo≈æit vyƒçi≈°tƒõn√Ω nadpis
        article['original_title'] = article.get('original_title', title)
        
        if not is_sports_news(title, article.get('description', '')):
            filtered_articles.append(article)
        else:
            print(f"  ‚öΩ Odstra≈àuji sportovn√≠ zpr√°vu: {title[:60]}...")
    
    # Omezit na 40 zpr√°v
    filtered_articles = filtered_articles[:40]
    data['articles'] = filtered_articles
    
    print(f"Po filtrov√°n√≠: {len(filtered_articles)} zpr√°v")
    print(f"P≈ôekl√°d√°m zpr√°vy pomoc√≠ OpenRouter.ai...")
    
    # P≈ôelo≈æit ka≈ædou zpr√°vu
    for i, article in enumerate(data['articles']):
        # P≈ôelo≈æit titulek
        if article.get('title'):
            # Nadpis u≈æ je vyƒçi≈°tƒõn√Ω z clean_title(), jen ho p≈ôelo≈æit
            translated = translate_text_with_openrouter(article['title'])
            article['title'] = translated
            print(f"{i+1}. {translated[:60]}...")
            
        # P≈ôelo≈æit popis (pokud existuje)
        if article.get('description'):
            original_desc = article['description']
            translated_desc = translate_text_with_openrouter(original_desc)
            article['description'] = translated_desc[:200] if translated_desc else ''
            
        # Kr√°tk√° pauza mezi po≈æadavky
        time.sleep(0.5)  # Del≈°√≠ pauza pro API
    
    # Ulo≈æit p≈ôelo≈æen√© zpr√°vy
    with open('_data/world_news.json', 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
    
    print("P≈ôeklad dokonƒçen!")

if __name__ == "__main__":
    main()