name: Fetch Google Trends

on:
  schedule:
    # Bƒõ≈æ√≠ ka≈æd√© 3 hodiny
    - cron: '0 */3 * * *'
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  fetch-trends:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        # Pou≈æ√≠v√°me pouze standardn√≠ knihovny Pythonu
    
    - name: Fetch trends from RSS
      run: |
        python << 'EOF'
        import json
        from urllib.request import urlopen
        from urllib.error import URLError
        from datetime import datetime
        import xml.etree.ElementTree as ET
        import os
        import re
        
        def process_title_with_llm(title):
            """
            Zpracuje nadpis pomoc√≠ LLM - p≈ôelo≈æ√≠ z angliƒçtiny a sumarizuje na max 112 znak≈Ø
            """
            if not title or len(title.strip()) == 0:
                return title
            
            # Jednoduch√° detekce angliƒçtiny - pokud obsahuje typick√© anglick√© slova
            english_indicators = ['the', 'and', 'of', 'to', 'in', 'for', 'with', 'on', 'at', 'by', 'from', 'says', 'after', 'objects', 'plans', 'appears', 'president']
            title_lower = title.lower()
            is_english = any(f' {word} ' in f' {title_lower} ' for word in english_indicators)
            
            try:
                api_key = os.environ.get('OPENROUTER_API_KEY')
                
                if api_key:
                    print(f"  üîë API kl√≠ƒç nalezen: {api_key[:8]}...")
                    print(f"  ü§ñ {'P≈ôekl√°d√°m a sumarizuji' if is_english else 'Sumarizuji'}: {title[:50]}...")
                    
                    if is_english:
                        prompt = f"P≈ôelo≈æ tento anglick√Ω nadpis ƒçl√°nku do ƒçe≈°tiny a zkra≈• ho na maxim√°lnƒõ 160 znak≈Ø. Zachovej hlavn√≠ informaci a udƒõlej z toho smyslupln√Ω ƒçesk√Ω nadpis:\n\n{title}\n\nOdpovƒõz pouze ƒçesk√Ωm nadpisem, bez dal≈°√≠ho koment√°≈ôe."
                    else:
                        prompt = f"Zkra≈• tento ƒçesk√Ω nadpis ƒçl√°nku na maxim√°lnƒõ 160 znak≈Ø, zachovej hlavn√≠ informaci:\n\n{title}\n\nOdpovƒõz pouze zkr√°cen√Ωm ƒçesk√Ωm nadpisem, bez dal≈°√≠ho koment√°≈ôe."
                    
                    # OpenRouter.ai API vol√°n√≠
                    data = {
                        "model": "mistralai/mistral-medium-2506",
                        "messages": [
                            {"role": "user", "content": prompt}
                        ],
                        "max_tokens": 100,
                        "temperature": 0.3
                    }
                    
                    headers = {
                        "Authorization": f"Bearer {api_key}",
                        "Content-Type": "application/json",
                        "HTTP-Referer": "https://github.com/tangero/vzhuruvpred",
                        "X-Title": "VzhuruVpred News Trends"
                    }
                    
                    # HTTP request pomoc√≠ urllib
                    from urllib.request import Request, urlopen
                    
                    req = Request(
                        "https://openrouter.ai/api/v1/chat/completions",
                        data=json.dumps(data).encode('utf-8'),
                        headers=headers
                    )
                    
                    with urlopen(req, timeout=30) as response:
                        response_data = response.read().decode('utf-8')
                        print(f"  üì° API odpovƒõƒè: {response_data[:200]}...")
                        result = json.loads(response_data)
                        
                    translated_title = result['choices'][0]['message']['content'].strip()
                    
                    # Zajist√≠me maxim√°lnƒõ 160 znak≈Ø
                    if len(translated_title) > 160:
                        translated_title = translated_title[:157] + '...'
                        
                    print(f"    ‚úÖ V√Ωsledek: {translated_title}")
                    return translated_title
                    
                else:
                    print(f"  ‚ö†Ô∏è  ≈Ω√°dn√Ω API kl√≠ƒç, pou≈æ√≠v√°m fallback pro: {title[:50]}...")
                    # Fallback bez API - pouze zkr√°cen√≠
                    if len(title) > 160:
                        return title[:157] + '...'
                    return title
                
            except Exception as e:
                print(f"  ‚ùå OpenRouter API selhalo pro '{title[:50]}...': {e}")
                print(f"  üîç Error typ: {type(e).__name__}")
                import traceback
                print(f"  üìã Traceback: {traceback.format_exc()}")
                # Fallback - pouze zkr√°cen√≠
                if len(title) > 160:
                    return title[:157] + '...'
                return title
        
        print("Naƒç√≠t√°m Google Trends RSS feed pro ƒåesko...")
        
        # Naƒçteme RSS feed
        rss_url = 'https://trends.google.cz/trending/rss?geo=CZ'
        
        try:
            with urlopen(rss_url, timeout=30) as response:
                content = response.read()
            
            print(f"RSS odpovƒõƒè: {response.status}")
            
            # Parsujeme XML
            root = ET.fromstring(content)
            
            trends_data = []
            
            # Najdeme v≈°echny item elementy
            items = root.findall('.//item')
            print(f"Nalezeno {len(items)} trendov√Ωch polo≈æek")
            
            # Nejd≈ô√≠ve sesb√≠r√°me v≈°echny trendy s traffic daty
            all_trends = []
            
            for item in items:
                # Z√°kladn√≠ informace
                title = item.find('title')
                title_text = title.text if title is not None else ''
                
                # Traffic information - zkus√≠me r≈Øzn√© form√°ty namespace
                traffic = None
                for elem in item.iter():
                    if elem.tag.endswith('approx_traffic'):
                        traffic = elem
                        break
                
                traffic_text = traffic.text if traffic is not None else '0'
                
                # P≈ôevedeme traffic na ƒç√≠slo pro ≈ôazen√≠
                try:
                    traffic_num = int(traffic_text.replace('+', '').replace(',', ''))
                except (ValueError, AttributeError):
                    traffic_num = 0
                
                all_trends.append((item, traffic_num, traffic_text, title_text))
            
            # Se≈ôad√≠me podle poƒçtu hled√°n√≠ (sestupnƒõ)
            all_trends.sort(key=lambda x: x[1], reverse=True)
            
            # Vezmeme prvn√≠ch 8 nejhledanƒõj≈°√≠ch
            for idx, (item, traffic_num, traffic_text, title_text) in enumerate(all_trends[:8]):
                
                # Obr√°zek - hlavn√≠ obr√°zek trendu
                picture = None
                for elem in item.iter():
                    if elem.tag.endswith('picture') and not elem.tag.endswith('news_item_picture'):
                        picture = elem
                        break
                picture_url = picture.text if picture is not None else ''
                
                # Oprav√≠me relativn√≠ URL
                if picture_url and picture_url.startswith('//'):
                    picture_url = 'https:' + picture_url
                
                # Zdroj obr√°zku
                picture_source = None
                for elem in item.iter():
                    if elem.tag.endswith('picture_source'):
                        picture_source = elem
                        break
                source_text = picture_source.text if picture_source is not None else 'Google Trends'
                
                # Prvn√≠ souvisej√≠c√≠ ƒçl√°nek
                news_items = []
                for elem in item.iter():
                    if elem.tag.endswith('news_item'):
                        news_items.append(elem)
                
                if news_items:
                    first_news = news_items[0]
                    
                    # Najdeme news elementy bez namespace
                    news_title = None
                    news_url = None  
                    news_source = None
                    news_picture = None
                    
                    for elem in first_news.iter():
                        if elem.tag.endswith('news_item_title'):
                            news_title = elem
                        elif elem.tag.endswith('news_item_url'):
                            news_url = elem
                        elif elem.tag.endswith('news_item_source'):
                            news_source = elem
                        elif elem.tag.endswith('news_item_picture'):
                            news_picture = elem
                    
                    # Zkus√≠me naj√≠t obr√°zek ƒçl√°nku jako fallback
                    if not picture_url and news_picture is not None:
                        picture_url = news_picture.text or ''
                        if picture_url and picture_url.startswith('//'):
                            picture_url = 'https:' + picture_url
                    
                    news_title_text = news_title.text if news_title is not None else title_text
                    news_url_text = news_url.text if news_url is not None else f"https://www.google.com/search?q={title_text}&tbm=nws"
                    news_source_text = news_source.text if news_source is not None else source_text
                    
                    # Sumarizace a p≈ôeklad pomoc√≠ LLM
                    news_title_text = process_title_with_llm(news_title_text)
                else:
                    news_title_text = process_title_with_llm(title_text)
                    news_url_text = f"https://www.google.com/search?q={title_text}&tbm=nws"
                    news_source_text = source_text
                
                # Vytvo≈ô√≠me trend item
                trend_item = {
                    'rank': idx + 1,
                    'query': title_text,
                    'news_title': news_title_text,
                    'news_url': news_url_text,
                    'picture': picture_url,
                    'traffic': f"{traffic_text}+ hled√°n√≠" if traffic_text != 'Trending' else 'Trending',
                    'source': news_source_text,
                    'explore_url': f"https://trends.google.cz/trends/explore?q={title_text}&geo=CZ"
                }
                
                trends_data.append(trend_item)
                print(f"Trend #{idx+1}: {title_text}")
                print(f"  - ƒål√°nek: {news_title_text[:50]}...")
                print(f"  - Obr√°zek: {'‚úì' if picture_url else '‚úó'}")
                print(f"  - Traffic: {traffic_text}")
                
        except Exception as e:
            print(f"Chyba p≈ôi naƒç√≠t√°n√≠ RSS: {e}")
            trends_data = []
        
        # Ulo≈æen√≠ do JSON
        if trends_data:
            output = {
                'updated': datetime.now().isoformat(),
                'trends': trends_data
            }
            
            with open('_data/trends.json', 'w', encoding='utf-8') as f:
                json.dump(output, f, ensure_ascii=False, indent=2)
            
            print(f"\n‚úÖ √öspƒõ≈°nƒõ naƒçteno {len(trends_data)} trend≈Ø z RSS feedu")
        else:
            print("\n‚ùå Nepoda≈ôilo se naƒç√≠st ≈æ√°dn√© trendy")
        
        EOF
    
    - name: Commit trends data
      run: |
        # Check if file is ignored
        if ! git check-ignore _data/trends.json >/dev/null 2>&1; then
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add _data/trends.json
          git diff --staged --quiet || git commit -m "Update Google Trends data"
        else
          echo "trends.json is in .gitignore - skipping commit"
        fi
    
    - name: Push changes
      run: |
        git push
